class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors  <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes  <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat  <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(2,4,5,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
lapply(flag_shapes, unique)
lapply(flags, unique)
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
dimnames(flags)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = T)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips  <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnom(10, mean = 100, sd = 25)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rpois(5, lambda = 10)
replicate(100, rpois(5,10))
my_pois  <- replicate(100, rpois(5,10))
my_pois
cm  <- colMeans(my_pois)
cm
his(cm)
hist(cm)
d1  <- Sys.Date()
class(d1)
unclass(d1)
d1
d2  <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
POSIXlt(Sys.time())
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- c("October 17, 1986 08:24")
t3 <- as.character("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, unites = 'days')
difftime(Sys.time(), t1, units = 'days')
5+7
x <- 5+7
x
y  <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 + 100
my_sqrt  <- sqrt(z-1)
my_sqrt
my_div  <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0,10,100)
z*2 + 1000
my_div
getwd()
ls()
x  <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir  <- dir()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists()
file.exists("mytest.R")
file.infor("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path())
dir.create(file.path(), "testdir2", "testdir3", recursive = TRUE)
dir.create("testdir2", 'testdir3", recursive = TRUE)
)
)
)
))))
dlka;j
"
""
<-
d
file.path()
'
)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink(file.path('testdir'), recursive = TRUE)
unlink('testdir', recursive = TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10, by=0.5)
seq(5,10, length = 30)
my_seq  <- seq(5,10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
c(0.5, 55, -10, 6)
num_vect  <- c(0.5, 55, -10, 6)
num_vect < 1
tf  <- num_vect < 1
tf
num_vect >= 6
my_char  <- c("My", "name", "is")
my_char
paste(my_chare, collapse = " ")
paste(my_char, collapse = " ")
my_name  <- c(my_char, "Aaron")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z")
)
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
Sys.Date()
mean(c(2,4,5))
submit()
submit()
submit()
exit()
quit()
setwd("Desktop/DataScienceBooks/CourseNotes/5_ReproducibleResearch/ReproducibleResearchAssn1")
dir()
?zip
?unzip
unzip("repdata-data-activity.zip")
dir()
library(data.table)
?fread
fread("activity.csv")
data  <- fread("activity.csv")
View(data)
class(data$date)
library(lubridate)
data$date  <- ymd(data$date)
class(data$date)
with(data, table(steps, date))
test  <- with(data, table(date, steps))
View(test)
?hist
?sum
sapply(split(data$date), sum)
?split
sapply(split(data, date), sum)
sapply(split(data, data$date), sum)
?sapply
sapply(split(data, data$date)["steps"], sum)
sapply(split(data, data$date)["steps"], sum(na.rm = T)
)
sapply(split(data, data$date)["steps"], sum(na.rm = T))
sapply(split(data, data$date)["steps"], sum(rm.na = T))
?sum
sapply(split(data, data$date)["steps"], sum, na.rm = T)
sapply(split(data, data$date)[["steps"]], sum, na.rm = T)
test  <- split(data, data$date)
View(test)
test  <- split(data, as.factor(data$date))
View(test)
test  <- split(data$step, as.factor(data$date))
View(test)
test  <- sapply(split(data$step, as.factor(data$date)), sum, na.rm = T)
View(test)
?gl
gl(3,10)
test  <- sapply(split(data$step, as.factor(data$date)), sum, na.rm = T)
sapply(split(data$step, as.factor(data$date)), sum, na.rm = T)
sapply(split(data$step, data$date), sum, na.rm = T)
class(sapply(split(data$step, data$date), sum, na.rm = T))
totalStepsPerDay <- sapply(split(data$step, data$date), sum, na.rm = T)
?qplot
library(ggplot2)
?qplot
qplot(totalStepsPerDay)
?qplot
qplot(totalStepsPerDay, main = "Total Steps Per Day")
qplot(totalStepsPerDay, main = "Total Steps Per Day", color = "blue")
?qplot
qplot(totalStepsPerDay, main = "Total Steps Per Day", bin = range(totalStepsPerDay)/20)
?range
qplot(totalStepsPerDay, main = "Total Steps Per Day", bin = range(totalStepsPerDay, na.rm = T)/20)
range(totalStepsPerDay, na.rm = T)
qplot(totalStepsPerDay, main = "Total Steps Per Day", bin = range(totalStepsPerDay, na.rm = T)[2]/20)
qplot(totalStepsPerDay, main = "Total Steps Per Day", bin = range(totalStepsPerDay, na.rm = T)[2]/15)
qplot(totalStepsPerDay, main = "Total Steps Per Day", bin = range(totalStepsPerDay, na.rm = T)[2]/15)
mean(totalStepsPerDay)
median(totalStepsPerDay)
summary(totalStepsPerDay)
c("Mean", mean(totalStepsPerDay))
?ymd_hm(paste(data$date, data$interval)
)
ymd_hm(paste(data$date, data$interval))
is.na(data$interval)
sum(is.na(data$interval))
test  <- ymd_hm(paste(data$date, data$interval))
test(data$date, data$interval)
test <- paste(data$date, data$interval)
View(test)
View(test)
test <- paste(data$date, data$interval, sep = " ")
View(test)
test1  <- paste(data$date, data$interval, sep = " ")
View(test1)
? paste
meanStepsPerInterval <- sapply(split(data$step, data$interval), mean, na.rm = T)
View(meanStepsPerInterval)
test  <- split(data$step, data$interval)
View(test)
unique(data$interval)
qplot(unique(interval), meanStepsPerInterval)
qplot(unique(data$interval), meanStepsPerInterval)
qplot(unique(data$interval), meanStepsPerInterval, type = "l")
?qplot
qplot(unique(data$interval), meanStepsPerInterval, geom = "line")
?max
unique(data$interval)[meanStepsPerInterval==max(meanStepsPerInterval)]
length(unique(data$interval))
class(data$date)
?subset
?filter
?select
library(data.table)
library(dplyr)
sum(is.na(data$steps))
test <- which(is.na(data$date))
View(test)
?which
test <- which(is.na(data$steps))
meanStepsPerInterval <- sapply(split(data$step, data$interval), mean, na.rm = T)
View(meanStepsPerInterval)
class(interval)
class(data$interval)
meanStepsPerInterval[as.character(data$interval[0])]
data$interval
data$interval[1]
meanStepsPerInterval[as.character(data$interval[1])]
meanStepsPerInterval["0"]
meanStepsPerInterval["10"]
meanStepsPerInterval[as.character(data$interval[3])]
naIndex <- which(is.na(data$steps))
data$steps[naIndex] = meanStepsPerInterval[as.character(data$interval[naIndex])]
View(data)
?bin
?qplot
library(ggplot2)
?qplot
totalStepsPerDay <- sapply(split(data$step, data$date), sum, na.rm = T)
qplot(totalStepsPerDay, main = "Total Steps Per Day", binwidth = range(totalStepsPerDay, na.rm = T)[2]/15)
?mutate
test  <- data.table(data)
test <- mutate(test, dayType = weekday(test$date))
?weekday
library(lubridate)
?weekday
?weekdays
test <- mutate(test, dayType = weekdays(test$date))
View(test)
test$dayType[test$dayType==Monday] = c("Weekday)
"
)
test$dayType[test$dayType==Monday] = c("Weekday")
test$dayType[test$dayType== "Monday"] = c("Weekday")
test$dayType[test$dayType== "Tuesday"] = as.factor("Weekday")
test$dayType[test$dayType== "Tuesday"] = as.factor(c("Weekday"))
test$dayType[test$dayType== 1] = as.factor(c("Weekday"))
test <- mutate(test, dayType = weekdays(test$date))
View(test)
test$dayType[test$dayType == "Sunday" | test$dayType == "Saturday"] = c("Weekend")
test$dayType[test$dayType != "Sunday" | test$dayType != "Saturday"] = c("Weekday")
?filter
?select
test1  <- test[test$dayType == "Weekday",]
View(test1)
View(test1)
View(test1)
test <- mutate(test, dayType = weekdays(test$date))
test$dayType[test$dayType == "Sunday" | test$dayType == "Saturday"] = c("Weekend")
test <- mutate(test, dayType = weekdays(test$date))
test$dayType[test$dayType != "Sunday" & test$dayType != "Saturday"] = c("Weekday")
weekdayData  <- test[test$dayType == "Weekday",]
View(weekdayData)
weekendData  <- teset[test$dayType == "Weekend",]
weekendData  <- test[test$dayType == "Weekend",]
test$dayType[test$dayType == "Sunday" | test$dayType == "Saturday"] = c("Weekend")
weekendData  <- test[test$dayType == "Weekend",]
meanStepsPerInterval <- sapply(split(weekdayData$step, weekdayData$interval), mean, na.rm = T)
test2  <- names(meanStepsPerInterval)
test2  <- as.numeric(names(meanStepsPerInterval))
?data.table
meanStepsPerInterval[1]
meanData <- data.table(as.numeric(names(meanStepsPerInterval)),meanStepsPerInterval)
View(meanData)
meanData <- data.table(as.numeric(names(meanStepsPerInterval)),meanStepsPerInterval, rep(c("Weekday"),length(meanStepsPerInterval)))
View(meanData)
library(kintr)
library(kintr)
library(knitr)
?knit
getwd()
dir()
knit("PA1_template.Rmd")
knit("PA1_template.md")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
View(meanData)
setnames(meanData, colnames(meanData), c("interval", "steps", "dayType")
)
View(meanData)
names(meanData)
class(meanData$interval)
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
test  <- data.table(cbind(meanData$interval, meanStepsPerInterval,rep(c("Weekend",length(meanStepsPerInterval)))))
View(test)
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
test  <- data.table(cbind(meanData$interval, meanStepsPerInterval,rep(c("Weekend"),length(meanStepsPerInterval))))
View(test)
newData <- mutate(newData, dayType = weekdays(test$date))
newData$dayType[newData$dayType != "Sunday" & newData$dayType != "Saturday"] <- c("Weekday")
newData$dayType[newData$dayType == "Sunday" | newData$dayType == "Saturday"] <- c("Weekend")
weekdayData <- newData[newData$dayType == "Weekday",]
weekendData <- newData[newData$dayType == "Weekend",]
meanStepsPerInterval <- sapply(split(weekdayData$step, weekdayData$interval), mean, na.rm = T)
meanData <- data.table(as.numeric(names(meanStepsPerInterval)),meanStepsPerInterval,rep(c("Weekday"),length(meanStepsPerInterval)))
setnames(meanData, colnames(meanData),c("interval", "steps", "dayType"))
meanStepsPerInterval <- sapply(split(weekendData$step, weekendData$interval), mean, na.rm = T)
test  <- data.table(cbind(meanData$interval, meanStepsPerInterval,rep(c("Weekend"),length(meanStepsPerInterval))))
View(test)
View(weekdayData)
View(newData)
newData <- mutate(newData, dayType = weekdays(test$date))
newData$date  <- ymd(newData$date)
newData <- mutate(newData, dayType = weekdays(test$date))
class(newData$date)
newData <- mutate(newData, dayType = weekdays(newData$date))
newData$dayType[newData$dayType != "Sunday" & newData$dayType != "Saturday"] <- c("Weekday")
newData$dayType[newData$dayType == "Sunday" | newData$dayType == "Saturday"] <- c("Weekend")
weekdayData <- newData[newData$dayType == "Weekday",]
weekendData <- newData[newData$dayType == "Weekend",]
meanStepsPerInterval <- sapply(split(weekdayData$step, weekdayData$interval), mean, na.rm = T)
meanData <- data.table(as.numeric(names(meanStepsPerInterval)),meanStepsPerInterval,rep(c("Weekday"),length(meanStepsPerInterval)))
setnames(meanData, colnames(meanData),c("interval", "steps", "dayType"))
meanStepsPerInterval <- sapply(split(weekendData$step, weekendData$interval), mean, na.rm = T)
test  <- data.table(cbind(meanData$interval, meanStepsPerInterval,rep(c("Weekend"),length(meanStepsPerInterval))))
View(test)
test  <- rbind(meanData,data.table(cbind(meanData$interval, meanStepsPerInterval,rep(c("Weekend"),length(meanStepsPerInterval)))))
meanStepsPerInterval <- sapply(split(weekdayData$step, weekdayData$interval), mean, na.rm = T)
meanData <- data.table(as.numeric(names(meanStepsPerInterval)),meanStepsPerInterval,rep(c("Weekday"),length(meanStepsPerInterval)))
setnames(meanData, colnames(meanData),c("interval", "steps", "dayType"))
?rbind
test  <- cbind(meanData,data.table(cbind(meanData$interval, meanStepsPerInterval,rep(c("Weekend"),length(meanStepsPerInterval)))))
View(test)
View(test)
meanData <- rbind(meanData, data.table(cbind(meanData$interval, meanStepsPerInterval,rep(c("Weekend"),length(meanStepsPerInterval)))))
meanData <- rbind(meanData, data.table(cbind(meanData$interval, meanStepsPerInterval,rep(c("Weekend"),length(meanStepsPerInterval)))), use.names =F)
View(meanData)
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
?xyplot
library(lattice)
?xyplot
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
?plot
source("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
View(weekdayData)
newData <- mutate(newData, dayType = weekdays(test$date))
newData$dayType[newData$dayType != "Sunday" & newData$dayType != "Saturday"] <- c("Weekday")
newData$dayType[newData$dayType == "Sunday" | newData$dayType == "Saturday"] <- c("Weekend")
weekdayData <- newData[newData$dayType == "Weekday",]
weekendData <- newData[newData$dayType == "Weekend",]
meanStepsPerInterval <- sapply(split(weekdayData$step, weekdayData$interval), mean, na.rm = T)
meanWeekdayData <- data.table(as.numeric(names(meanStepsPerInterval)),meanStepsPerInterval)
setnames(meanWeekdayData, colnames(meanWeekdayData), c("interval", "steps"))
meanStepsPerInterval <- sapply(split(weekendData$step, weekendData$interval), mean, na.rm = T)
meanWeekendData <- data.table(as.numeric(meanStepsPerInterval), meanStepsPerInterval)
setnames(meanWeekendData, colnames(meanWeekendData),c("interval", "steps"))
View(newData)
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
library(knitr)
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
